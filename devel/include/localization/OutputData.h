// Generated by gencpp from file localization/OutputData.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_OUTPUTDATA_H
#define LOCALIZATION_MESSAGE_OUTPUTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace localization
{
template <class ContainerAllocator>
struct OutputData_
{
  typedef OutputData_<ContainerAllocator> Type;

  OutputData_()
    : header()
    , robotPose()
    , robotHeadPose()
    , robotPoseConfidence(0.0)
    , bBallWasSeen(false)
    , ballCenterInImage()
    , ballDistance(0.0)
    , ballAngle(0.0)
    , ballCenterOnField()
    , bOpponentWasSeen(false)
    , opponentLeftEndInImage()
    , opponentRightEndInImage()
    , opponentDistance(0.0)
    , opponentAngle(0.0)
    , opponentCenterOnField()
    , opponentRadiusOnField(0.0)
    , bObstacleWasSeen(false)
    , iObstacleNumber(0)
    , obstacleLeftEndInImage()
    , obstacleRightEndInImage()
    , obstacleDistance()
    , obstacleAngle()
    , obstacleCenterOnField()
    , obstacleRadiusOnField()  {
      obstacleDistance.assign(0.0);

      obstacleAngle.assign(0.0);

      obstacleRadiusOnField.assign(0.0);
  }
  OutputData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robotPose(_alloc)
    , robotHeadPose(_alloc)
    , robotPoseConfidence(0.0)
    , bBallWasSeen(false)
    , ballCenterInImage(_alloc)
    , ballDistance(0.0)
    , ballAngle(0.0)
    , ballCenterOnField(_alloc)
    , bOpponentWasSeen(false)
    , opponentLeftEndInImage(_alloc)
    , opponentRightEndInImage(_alloc)
    , opponentDistance(0.0)
    , opponentAngle(0.0)
    , opponentCenterOnField(_alloc)
    , opponentRadiusOnField(0.0)
    , bObstacleWasSeen(false)
    , iObstacleNumber(0)
    , obstacleLeftEndInImage()
    , obstacleRightEndInImage()
    , obstacleDistance()
    , obstacleAngle()
    , obstacleCenterOnField()
    , obstacleRadiusOnField()  {
  (void)_alloc;
      obstacleLeftEndInImage.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));

      obstacleRightEndInImage.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));

      obstacleDistance.assign(0.0);

      obstacleAngle.assign(0.0);

      obstacleCenterOnField.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));

      obstacleRadiusOnField.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _robotPose_type;
  _robotPose_type robotPose;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _robotHeadPose_type;
  _robotHeadPose_type robotHeadPose;

   typedef float _robotPoseConfidence_type;
  _robotPoseConfidence_type robotPoseConfidence;

   typedef uint8_t _bBallWasSeen_type;
  _bBallWasSeen_type bBallWasSeen;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ballCenterInImage_type;
  _ballCenterInImage_type ballCenterInImage;

   typedef float _ballDistance_type;
  _ballDistance_type ballDistance;

   typedef float _ballAngle_type;
  _ballAngle_type ballAngle;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ballCenterOnField_type;
  _ballCenterOnField_type ballCenterOnField;

   typedef uint8_t _bOpponentWasSeen_type;
  _bOpponentWasSeen_type bOpponentWasSeen;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _opponentLeftEndInImage_type;
  _opponentLeftEndInImage_type opponentLeftEndInImage;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _opponentRightEndInImage_type;
  _opponentRightEndInImage_type opponentRightEndInImage;

   typedef float _opponentDistance_type;
  _opponentDistance_type opponentDistance;

   typedef float _opponentAngle_type;
  _opponentAngle_type opponentAngle;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _opponentCenterOnField_type;
  _opponentCenterOnField_type opponentCenterOnField;

   typedef float _opponentRadiusOnField_type;
  _opponentRadiusOnField_type opponentRadiusOnField;

   typedef uint8_t _bObstacleWasSeen_type;
  _bObstacleWasSeen_type bObstacleWasSeen;

   typedef int32_t _iObstacleNumber_type;
  _iObstacleNumber_type iObstacleNumber;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 5>  _obstacleLeftEndInImage_type;
  _obstacleLeftEndInImage_type obstacleLeftEndInImage;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 5>  _obstacleRightEndInImage_type;
  _obstacleRightEndInImage_type obstacleRightEndInImage;

   typedef boost::array<float, 5>  _obstacleDistance_type;
  _obstacleDistance_type obstacleDistance;

   typedef boost::array<float, 5>  _obstacleAngle_type;
  _obstacleAngle_type obstacleAngle;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 5>  _obstacleCenterOnField_type;
  _obstacleCenterOnField_type obstacleCenterOnField;

   typedef boost::array<float, 5>  _obstacleRadiusOnField_type;
  _obstacleRadiusOnField_type obstacleRadiusOnField;





  typedef boost::shared_ptr< ::localization::OutputData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::OutputData_<ContainerAllocator> const> ConstPtr;

}; // struct OutputData_

typedef ::localization::OutputData_<std::allocator<void> > OutputData;

typedef boost::shared_ptr< ::localization::OutputData > OutputDataPtr;
typedef boost::shared_ptr< ::localization::OutputData const> OutputDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::OutputData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::OutputData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'localization': ['/home/lian/robot_ws/src/localization/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization::OutputData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::OutputData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::OutputData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::OutputData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::OutputData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::OutputData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::OutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d5bb91e3132d7eb05a2ae36456b86d6";
  }

  static const char* value(const ::localization::OutputData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d5bb91e3132d7ebULL;
  static const uint64_t static_value2 = 0x05a2ae36456b86d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::OutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/OutputData";
  }

  static const char* value(const ::localization::OutputData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::OutputData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header 				# for time stamp\n\
geometry_msgs/Pose2D robotPose        		# Pose of the robot according to the particle filter localization\n\
geometry_msgs/Pose2D robotHeadPose              # Pose of the robot head according to the particle filter localization\n\
float32 robotPoseConfidence               	# confidence 0..1 for the robot_pose\n\
bool bBallWasSeen                               # boolean variable for ball detection\n\
geometry_msgs/Point ballCenterInImage		# coordinates of ball center in the image\n\
float32 ballDistance				# ball distance from robot as seen in the image\n\
float32 ballAngle				# ball angle from center as seen in the image, [-90,90]\n\
geometry_msgs/Point ballCenterOnField		# coordinates of ball center on field relative to robot localization\n\
bool bOpponentWasSeen                           # boolean variable for opponent detection\n\
geometry_msgs/Point opponentLeftEndInImage	# coordinates of opponent left end point in the image\n\
geometry_msgs/Point opponentRightEndInImage	# coordinates of opponent right end point in the image\n\
float32 opponentDistance			# opponent distance from robot as seen in the image\n\
float32 opponentAngle				# opponent angle from center as seen in the image, [-90,90]\n\
geometry_msgs/Point opponentCenterOnField	# coordinates of opponent center on field relative to robot localization\n\
float32 opponentRadiusOnField			# estimated radius of opponent on field\n\
bool bObstacleWasSeen                           # boolean variable for obstacle detection\n\
int32 iObstacleNumber                           # index of obstacle\n\
geometry_msgs/Point[5] obstacleLeftEndInImage	# coordinates of obstacle left end point in the image\n\
geometry_msgs/Point[5] obstacleRightEndInImage	# coordinates of obstacle right end point in the image\n\
float32[5] obstacleDistance                     # obstacle distance from robot as seen in the image\n\
float32[5] obstacleAngle			# obstacle angle from center as seen in the image, [-90,90]\n\
geometry_msgs/Point[5] obstacleCenterOnField	# coordinates of obstacle center on field relative to robot localization\n\
float32[5] obstacleRadiusOnField		# estimated radius of obstacle on field\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# Deprecated\n\
# Please use the full 3D pose.\n\
\n\
# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\
\n\
# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n\
\n\
\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::localization::OutputData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::OutputData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robotPose);
      stream.next(m.robotHeadPose);
      stream.next(m.robotPoseConfidence);
      stream.next(m.bBallWasSeen);
      stream.next(m.ballCenterInImage);
      stream.next(m.ballDistance);
      stream.next(m.ballAngle);
      stream.next(m.ballCenterOnField);
      stream.next(m.bOpponentWasSeen);
      stream.next(m.opponentLeftEndInImage);
      stream.next(m.opponentRightEndInImage);
      stream.next(m.opponentDistance);
      stream.next(m.opponentAngle);
      stream.next(m.opponentCenterOnField);
      stream.next(m.opponentRadiusOnField);
      stream.next(m.bObstacleWasSeen);
      stream.next(m.iObstacleNumber);
      stream.next(m.obstacleLeftEndInImage);
      stream.next(m.obstacleRightEndInImage);
      stream.next(m.obstacleDistance);
      stream.next(m.obstacleAngle);
      stream.next(m.obstacleCenterOnField);
      stream.next(m.obstacleRadiusOnField);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OutputData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::OutputData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::OutputData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robotPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.robotPose);
    s << indent << "robotHeadPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.robotHeadPose);
    s << indent << "robotPoseConfidence: ";
    Printer<float>::stream(s, indent + "  ", v.robotPoseConfidence);
    s << indent << "bBallWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bBallWasSeen);
    s << indent << "ballCenterInImage: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ballCenterInImage);
    s << indent << "ballDistance: ";
    Printer<float>::stream(s, indent + "  ", v.ballDistance);
    s << indent << "ballAngle: ";
    Printer<float>::stream(s, indent + "  ", v.ballAngle);
    s << indent << "ballCenterOnField: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ballCenterOnField);
    s << indent << "bOpponentWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bOpponentWasSeen);
    s << indent << "opponentLeftEndInImage: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.opponentLeftEndInImage);
    s << indent << "opponentRightEndInImage: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.opponentRightEndInImage);
    s << indent << "opponentDistance: ";
    Printer<float>::stream(s, indent + "  ", v.opponentDistance);
    s << indent << "opponentAngle: ";
    Printer<float>::stream(s, indent + "  ", v.opponentAngle);
    s << indent << "opponentCenterOnField: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.opponentCenterOnField);
    s << indent << "opponentRadiusOnField: ";
    Printer<float>::stream(s, indent + "  ", v.opponentRadiusOnField);
    s << indent << "bObstacleWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObstacleWasSeen);
    s << indent << "iObstacleNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iObstacleNumber);
    s << indent << "obstacleLeftEndInImage[]" << std::endl;
    for (size_t i = 0; i < v.obstacleLeftEndInImage.size(); ++i)
    {
      s << indent << "  obstacleLeftEndInImage[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacleLeftEndInImage[i]);
    }
    s << indent << "obstacleRightEndInImage[]" << std::endl;
    for (size_t i = 0; i < v.obstacleRightEndInImage.size(); ++i)
    {
      s << indent << "  obstacleRightEndInImage[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacleRightEndInImage[i]);
    }
    s << indent << "obstacleDistance[]" << std::endl;
    for (size_t i = 0; i < v.obstacleDistance.size(); ++i)
    {
      s << indent << "  obstacleDistance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacleDistance[i]);
    }
    s << indent << "obstacleAngle[]" << std::endl;
    for (size_t i = 0; i < v.obstacleAngle.size(); ++i)
    {
      s << indent << "  obstacleAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacleAngle[i]);
    }
    s << indent << "obstacleCenterOnField[]" << std::endl;
    for (size_t i = 0; i < v.obstacleCenterOnField.size(); ++i)
    {
      s << indent << "  obstacleCenterOnField[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacleCenterOnField[i]);
    }
    s << indent << "obstacleRadiusOnField[]" << std::endl;
    for (size_t i = 0; i < v.obstacleRadiusOnField.size(); ++i)
    {
      s << indent << "  obstacleRadiusOnField[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacleRadiusOnField[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_OUTPUTDATA_H
