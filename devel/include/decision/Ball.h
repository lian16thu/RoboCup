// Generated by gencpp from file decision/Ball.msg
// DO NOT EDIT!


#ifndef DECISION_MESSAGE_BALL_H
#define DECISION_MESSAGE_BALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace decision
{
template <class ContainerAllocator>
struct Ball_
{
  typedef Ball_<ContainerAllocator> Type;

  Ball_()
    : bBallWasSeen(0)
    , iCenterInImageX(0)
    , iCenterInImageY(0)
    , iRadiusInImage(0)
    , fDistance(0.0)
    , fAngle(0.0)  {
    }
  Ball_(const ContainerAllocator& _alloc)
    : bBallWasSeen(0)
    , iCenterInImageX(0)
    , iCenterInImageY(0)
    , iRadiusInImage(0)
    , fDistance(0.0)
    , fAngle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _bBallWasSeen_type;
  _bBallWasSeen_type bBallWasSeen;

   typedef uint16_t _iCenterInImageX_type;
  _iCenterInImageX_type iCenterInImageX;

   typedef uint16_t _iCenterInImageY_type;
  _iCenterInImageY_type iCenterInImageY;

   typedef uint16_t _iRadiusInImage_type;
  _iRadiusInImage_type iRadiusInImage;

   typedef float _fDistance_type;
  _fDistance_type fDistance;

   typedef float _fAngle_type;
  _fAngle_type fAngle;





  typedef boost::shared_ptr< ::decision::Ball_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision::Ball_<ContainerAllocator> const> ConstPtr;

}; // struct Ball_

typedef ::decision::Ball_<std::allocator<void> > Ball;

typedef boost::shared_ptr< ::decision::Ball > BallPtr;
typedef boost::shared_ptr< ::decision::Ball const> BallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision::Ball_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision::Ball_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'decision': ['/home/lian/robot_ws/src/decision/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision::Ball_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision::Ball_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::Ball_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::Ball_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::Ball_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::Ball_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision::Ball_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1776e77d61a18b8d498a831f6c9807a";
  }

  static const char* value(const ::decision::Ball_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1776e77d61a18b8ULL;
  static const uint64_t static_value2 = 0xd498a831f6c9807aULL;
};

template<class ContainerAllocator>
struct DataType< ::decision::Ball_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision/Ball";
  }

  static const char* value(const ::decision::Ball_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision::Ball_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bBallWasSeen\n\
uint16 iCenterInImageX\n\
uint16 iCenterInImageY\n\
uint16 iRadiusInImage\n\
float32 fDistance\n\
float32 fAngle\n\
";
  }

  static const char* value(const ::decision::Ball_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision::Ball_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bBallWasSeen);
      stream.next(m.iCenterInImageX);
      stream.next(m.iCenterInImageY);
      stream.next(m.iRadiusInImage);
      stream.next(m.fDistance);
      stream.next(m.fAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ball_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision::Ball_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision::Ball_<ContainerAllocator>& v)
  {
    s << indent << "bBallWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bBallWasSeen);
    s << indent << "iCenterInImageX: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iCenterInImageX);
    s << indent << "iCenterInImageY: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iCenterInImageY);
    s << indent << "iRadiusInImage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iRadiusInImage);
    s << indent << "fDistance: ";
    Printer<float>::stream(s, indent + "  ", v.fDistance);
    s << indent << "fAngle: ";
    Printer<float>::stream(s, indent + "  ", v.fAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_MESSAGE_BALL_H
