// Generated by gencpp from file decision/Obstacle.msg
// DO NOT EDIT!


#ifndef DECISION_MESSAGE_OBSTACLE_H
#define DECISION_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace decision
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : bObstacleWasSeen(0)
    , iObstacleNumber(0)
    , iLeftEdgeInImageX()
    , iLeftEdgeInImageY()
    , iRightEdgeInImageX()
    , iRightEdgeInImageY()
    , iHeightInImage()
    , fDistance()
    , fAngle()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : bObstacleWasSeen(0)
    , iObstacleNumber(0)
    , iLeftEdgeInImageX(_alloc)
    , iLeftEdgeInImageY(_alloc)
    , iRightEdgeInImageX(_alloc)
    , iRightEdgeInImageY(_alloc)
    , iHeightInImage(_alloc)
    , fDistance(_alloc)
    , fAngle(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _bObstacleWasSeen_type;
  _bObstacleWasSeen_type bObstacleWasSeen;

   typedef uint16_t _iObstacleNumber_type;
  _iObstacleNumber_type iObstacleNumber;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iLeftEdgeInImageX_type;
  _iLeftEdgeInImageX_type iLeftEdgeInImageX;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iLeftEdgeInImageY_type;
  _iLeftEdgeInImageY_type iLeftEdgeInImageY;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iRightEdgeInImageX_type;
  _iRightEdgeInImageX_type iRightEdgeInImageX;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iRightEdgeInImageY_type;
  _iRightEdgeInImageY_type iRightEdgeInImageY;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iHeightInImage_type;
  _iHeightInImage_type iHeightInImage;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fDistance_type;
  _fDistance_type fDistance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fAngle_type;
  _fAngle_type fAngle;





  typedef boost::shared_ptr< ::decision::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::decision::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::decision::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::decision::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'decision': ['/home/lian/robot_ws/src/decision/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da6170297c4a034fb40d276bbabe829c";
  }

  static const char* value(const ::decision::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda6170297c4a034fULL;
  static const uint64_t static_value2 = 0xb40d276bbabe829cULL;
};

template<class ContainerAllocator>
struct DataType< ::decision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision/Obstacle";
  }

  static const char* value(const ::decision::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bObstacleWasSeen\n\
\n\
uint16 iObstacleNumber  #all together, if 2 obstacles seen, it's 2\n\
uint16[] iLeftEdgeInImageX\n\
uint16[] iLeftEdgeInImageY\n\
uint16[] iRightEdgeInImageX\n\
uint16[] iRightEdgeInImageY\n\
uint16[] iHeightInImage\n\
float32[] fDistance\n\
float32[] fAngle\n\
";
  }

  static const char* value(const ::decision::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bObstacleWasSeen);
      stream.next(m.iObstacleNumber);
      stream.next(m.iLeftEdgeInImageX);
      stream.next(m.iLeftEdgeInImageY);
      stream.next(m.iRightEdgeInImageX);
      stream.next(m.iRightEdgeInImageY);
      stream.next(m.iHeightInImage);
      stream.next(m.fDistance);
      stream.next(m.fAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "bObstacleWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObstacleWasSeen);
    s << indent << "iObstacleNumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iObstacleNumber);
    s << indent << "iLeftEdgeInImageX[]" << std::endl;
    for (size_t i = 0; i < v.iLeftEdgeInImageX.size(); ++i)
    {
      s << indent << "  iLeftEdgeInImageX[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iLeftEdgeInImageX[i]);
    }
    s << indent << "iLeftEdgeInImageY[]" << std::endl;
    for (size_t i = 0; i < v.iLeftEdgeInImageY.size(); ++i)
    {
      s << indent << "  iLeftEdgeInImageY[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iLeftEdgeInImageY[i]);
    }
    s << indent << "iRightEdgeInImageX[]" << std::endl;
    for (size_t i = 0; i < v.iRightEdgeInImageX.size(); ++i)
    {
      s << indent << "  iRightEdgeInImageX[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iRightEdgeInImageX[i]);
    }
    s << indent << "iRightEdgeInImageY[]" << std::endl;
    for (size_t i = 0; i < v.iRightEdgeInImageY.size(); ++i)
    {
      s << indent << "  iRightEdgeInImageY[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iRightEdgeInImageY[i]);
    }
    s << indent << "iHeightInImage[]" << std::endl;
    for (size_t i = 0; i < v.iHeightInImage.size(); ++i)
    {
      s << indent << "  iHeightInImage[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iHeightInImage[i]);
    }
    s << indent << "fDistance[]" << std::endl;
    for (size_t i = 0; i < v.fDistance.size(); ++i)
    {
      s << indent << "  fDistance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fDistance[i]);
    }
    s << indent << "fAngle[]" << std::endl;
    for (size_t i = 0; i < v.fAngle.size(); ++i)
    {
      s << indent << "  fAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fAngle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_MESSAGE_OBSTACLE_H
