// Generated by gencpp from file decision/walkRequest.msg
// DO NOT EDIT!


#ifndef DECISION_MESSAGE_WALKREQUEST_H
#define DECISION_MESSAGE_WALKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace decision
{
template <class ContainerAllocator>
struct walkRequest_
{
  typedef walkRequest_<ContainerAllocator> Type;

  walkRequest_()
    : type(0)
    , speed_x(0.0)
    , speed_y(0.0)
    , rotation_speed(0.0)
    , step(0)  {
    }
  walkRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , speed_x(0.0)
    , speed_y(0.0)
    , rotation_speed(0.0)
    , step(0)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef double _speed_x_type;
  _speed_x_type speed_x;

   typedef double _speed_y_type;
  _speed_y_type speed_y;

   typedef double _rotation_speed_type;
  _rotation_speed_type rotation_speed;

   typedef int32_t _step_type;
  _step_type step;





  typedef boost::shared_ptr< ::decision::walkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision::walkRequest_<ContainerAllocator> const> ConstPtr;

}; // struct walkRequest_

typedef ::decision::walkRequest_<std::allocator<void> > walkRequest;

typedef boost::shared_ptr< ::decision::walkRequest > walkRequestPtr;
typedef boost::shared_ptr< ::decision::walkRequest const> walkRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision::walkRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision::walkRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'decision': ['/home/lian/robot_ws/src/decision/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision::walkRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision::walkRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::walkRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision::walkRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::walkRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision::walkRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision::walkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69b51b917edc240405fe819ca92a881d";
  }

  static const char* value(const ::decision::walkRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69b51b917edc2404ULL;
  static const uint64_t static_value2 = 0x05fe819ca92a881dULL;
};

template<class ContainerAllocator>
struct DataType< ::decision::walkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision/walkRequest";
  }

  static const char* value(const ::decision::walkRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision::walkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n\
float64 speed_x\n\
float64 speed_y\n\
float64 rotation_speed\n\
int32 step\n\
";
  }

  static const char* value(const ::decision::walkRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision::walkRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.speed_x);
      stream.next(m.speed_y);
      stream.next(m.rotation_speed);
      stream.next(m.step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct walkRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision::walkRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision::walkRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "speed_x: ";
    Printer<double>::stream(s, indent + "  ", v.speed_x);
    s << indent << "speed_y: ";
    Printer<double>::stream(s, indent + "  ", v.speed_y);
    s << indent << "rotation_speed: ";
    Printer<double>::stream(s, indent + "  ", v.rotation_speed);
    s << indent << "step: ";
    Printer<int32_t>::stream(s, indent + "  ", v.step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_MESSAGE_WALKREQUEST_H
