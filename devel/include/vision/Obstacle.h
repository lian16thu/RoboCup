// Generated by gencpp from file vision/Obstacle.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_OBSTACLE_H
#define VISION_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : bObstacleWasSeen(0)
    , iLeftEdgeInImageX(0)
    , iLeftEdgeInImageY(0)
    , iRightEdgeInImageX(0)
    , iRightEdgeInImageY(0)
    , iHeightInImage(0)
    , inumber(0)
    , iOthersLeftEdgeInImageX()
    , iOthersRightEdgeInImageX()
    , iOthersInImageY()
    , iOthersHeightInImage()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : bObstacleWasSeen(0)
    , iLeftEdgeInImageX(0)
    , iLeftEdgeInImageY(0)
    , iRightEdgeInImageX(0)
    , iRightEdgeInImageY(0)
    , iHeightInImage(0)
    , inumber(0)
    , iOthersLeftEdgeInImageX(_alloc)
    , iOthersRightEdgeInImageX(_alloc)
    , iOthersInImageY(_alloc)
    , iOthersHeightInImage(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _bObstacleWasSeen_type;
  _bObstacleWasSeen_type bObstacleWasSeen;

   typedef uint16_t _iLeftEdgeInImageX_type;
  _iLeftEdgeInImageX_type iLeftEdgeInImageX;

   typedef uint16_t _iLeftEdgeInImageY_type;
  _iLeftEdgeInImageY_type iLeftEdgeInImageY;

   typedef uint16_t _iRightEdgeInImageX_type;
  _iRightEdgeInImageX_type iRightEdgeInImageX;

   typedef uint16_t _iRightEdgeInImageY_type;
  _iRightEdgeInImageY_type iRightEdgeInImageY;

   typedef uint16_t _iHeightInImage_type;
  _iHeightInImage_type iHeightInImage;

   typedef uint16_t _inumber_type;
  _inumber_type inumber;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iOthersLeftEdgeInImageX_type;
  _iOthersLeftEdgeInImageX_type iOthersLeftEdgeInImageX;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iOthersRightEdgeInImageX_type;
  _iOthersRightEdgeInImageX_type iOthersRightEdgeInImageX;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iOthersInImageY_type;
  _iOthersInImageY_type iOthersInImageY;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _iOthersHeightInImage_type;
  _iOthersHeightInImage_type iOthersHeightInImage;





  typedef boost::shared_ptr< ::vision::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::vision::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::vision::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::vision::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'vision': ['/home/lian/robot_ws/src/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7ab1788ead7712018d8f4217af3a9ee";
  }

  static const char* value(const ::vision::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7ab1788ead77120ULL;
  static const uint64_t static_value2 = 0x18d8f4217af3a9eeULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/Obstacle";
  }

  static const char* value(const ::vision::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bObstacleWasSeen\n\
\n\
uint16 iLeftEdgeInImageX\n\
uint16 iLeftEdgeInImageY\n\
uint16 iRightEdgeInImageX\n\
uint16 iRightEdgeInImageY\n\
uint16 iHeightInImage\n\
\n\
uint16 inumber # apart from first obstacle, if there were 2 obstacles found, this is 1\n\
uint16[] iOthersLeftEdgeInImageX\n\
uint16[] iOthersRightEdgeInImageX\n\
uint16[] iOthersInImageY  # the same Y for both left and right\n\
uint16[] iOthersHeightInImage\n\
";
  }

  static const char* value(const ::vision::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bObstacleWasSeen);
      stream.next(m.iLeftEdgeInImageX);
      stream.next(m.iLeftEdgeInImageY);
      stream.next(m.iRightEdgeInImageX);
      stream.next(m.iRightEdgeInImageY);
      stream.next(m.iHeightInImage);
      stream.next(m.inumber);
      stream.next(m.iOthersLeftEdgeInImageX);
      stream.next(m.iOthersRightEdgeInImageX);
      stream.next(m.iOthersInImageY);
      stream.next(m.iOthersHeightInImage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "bObstacleWasSeen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bObstacleWasSeen);
    s << indent << "iLeftEdgeInImageX: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iLeftEdgeInImageX);
    s << indent << "iLeftEdgeInImageY: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iLeftEdgeInImageY);
    s << indent << "iRightEdgeInImageX: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iRightEdgeInImageX);
    s << indent << "iRightEdgeInImageY: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iRightEdgeInImageY);
    s << indent << "iHeightInImage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.iHeightInImage);
    s << indent << "inumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.inumber);
    s << indent << "iOthersLeftEdgeInImageX[]" << std::endl;
    for (size_t i = 0; i < v.iOthersLeftEdgeInImageX.size(); ++i)
    {
      s << indent << "  iOthersLeftEdgeInImageX[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iOthersLeftEdgeInImageX[i]);
    }
    s << indent << "iOthersRightEdgeInImageX[]" << std::endl;
    for (size_t i = 0; i < v.iOthersRightEdgeInImageX.size(); ++i)
    {
      s << indent << "  iOthersRightEdgeInImageX[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iOthersRightEdgeInImageX[i]);
    }
    s << indent << "iOthersInImageY[]" << std::endl;
    for (size_t i = 0; i < v.iOthersInImageY.size(); ++i)
    {
      s << indent << "  iOthersInImageY[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iOthersInImageY[i]);
    }
    s << indent << "iOthersHeightInImage[]" << std::endl;
    for (size_t i = 0; i < v.iOthersHeightInImage.size(); ++i)
    {
      s << indent << "  iOthersHeightInImage[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.iOthersHeightInImage[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_OBSTACLE_H
