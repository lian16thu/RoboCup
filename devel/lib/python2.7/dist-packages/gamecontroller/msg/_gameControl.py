# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gamecontroller/gameControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gameControl(genpy.Message):
  _md5sum = "8187bc9e4bf6fa1896498e321b213f47"
  _type = "gamecontroller/gameControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 gameType
uint8 state
uint8 firstHalf
uint8 kickOffTeam
uint8 secondaryState
uint8 secondaryStateTeam
uint8 secondaryStateInfo
uint8 dropInTeam
uint16 dropInTime
uint16 secsRemaining
uint16 secondaryTime

uint8 score
uint8 penaltyShot
uint16 singleShots

uint8 penalty
uint8 secsTillUnpenalised
uint8 yellowCardCount
uint8 redCardCount"""
  __slots__ = ['gameType','state','firstHalf','kickOffTeam','secondaryState','secondaryStateTeam','secondaryStateInfo','dropInTeam','dropInTime','secsRemaining','secondaryTime','score','penaltyShot','singleShots','penalty','secsTillUnpenalised','yellowCardCount','redCardCount']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint8','uint8','uint16','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gameType,state,firstHalf,kickOffTeam,secondaryState,secondaryStateTeam,secondaryStateInfo,dropInTeam,dropInTime,secsRemaining,secondaryTime,score,penaltyShot,singleShots,penalty,secsTillUnpenalised,yellowCardCount,redCardCount

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gameControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gameType is None:
        self.gameType = 0
      if self.state is None:
        self.state = 0
      if self.firstHalf is None:
        self.firstHalf = 0
      if self.kickOffTeam is None:
        self.kickOffTeam = 0
      if self.secondaryState is None:
        self.secondaryState = 0
      if self.secondaryStateTeam is None:
        self.secondaryStateTeam = 0
      if self.secondaryStateInfo is None:
        self.secondaryStateInfo = 0
      if self.dropInTeam is None:
        self.dropInTeam = 0
      if self.dropInTime is None:
        self.dropInTime = 0
      if self.secsRemaining is None:
        self.secsRemaining = 0
      if self.secondaryTime is None:
        self.secondaryTime = 0
      if self.score is None:
        self.score = 0
      if self.penaltyShot is None:
        self.penaltyShot = 0
      if self.singleShots is None:
        self.singleShots = 0
      if self.penalty is None:
        self.penalty = 0
      if self.secsTillUnpenalised is None:
        self.secsTillUnpenalised = 0
      if self.yellowCardCount is None:
        self.yellowCardCount = 0
      if self.redCardCount is None:
        self.redCardCount = 0
    else:
      self.gameType = 0
      self.state = 0
      self.firstHalf = 0
      self.kickOffTeam = 0
      self.secondaryState = 0
      self.secondaryStateTeam = 0
      self.secondaryStateInfo = 0
      self.dropInTeam = 0
      self.dropInTime = 0
      self.secsRemaining = 0
      self.secondaryTime = 0
      self.score = 0
      self.penaltyShot = 0
      self.singleShots = 0
      self.penalty = 0
      self.secsTillUnpenalised = 0
      self.yellowCardCount = 0
      self.redCardCount = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B3H2BH4B().pack(_x.gameType, _x.state, _x.firstHalf, _x.kickOffTeam, _x.secondaryState, _x.secondaryStateTeam, _x.secondaryStateInfo, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime, _x.score, _x.penaltyShot, _x.singleShots, _x.penalty, _x.secsTillUnpenalised, _x.yellowCardCount, _x.redCardCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.gameType, _x.state, _x.firstHalf, _x.kickOffTeam, _x.secondaryState, _x.secondaryStateTeam, _x.secondaryStateInfo, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime, _x.score, _x.penaltyShot, _x.singleShots, _x.penalty, _x.secsTillUnpenalised, _x.yellowCardCount, _x.redCardCount,) = _get_struct_8B3H2BH4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B3H2BH4B().pack(_x.gameType, _x.state, _x.firstHalf, _x.kickOffTeam, _x.secondaryState, _x.secondaryStateTeam, _x.secondaryStateInfo, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime, _x.score, _x.penaltyShot, _x.singleShots, _x.penalty, _x.secsTillUnpenalised, _x.yellowCardCount, _x.redCardCount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.gameType, _x.state, _x.firstHalf, _x.kickOffTeam, _x.secondaryState, _x.secondaryStateTeam, _x.secondaryStateInfo, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime, _x.score, _x.penaltyShot, _x.singleShots, _x.penalty, _x.secsTillUnpenalised, _x.yellowCardCount, _x.redCardCount,) = _get_struct_8B3H2BH4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B3H2BH4B = None
def _get_struct_8B3H2BH4B():
    global _struct_8B3H2BH4B
    if _struct_8B3H2BH4B is None:
        _struct_8B3H2BH4B = struct.Struct("<8B3H2BH4B")
    return _struct_8B3H2BH4B
