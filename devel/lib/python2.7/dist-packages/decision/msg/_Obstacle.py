# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from decision/Obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Obstacle(genpy.Message):
  _md5sum = "da6170297c4a034fb40d276bbabe829c"
  _type = "decision/Obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 bObstacleWasSeen

uint16 iObstacleNumber  #all together, if 2 obstacles seen, it's 2
uint16[] iLeftEdgeInImageX
uint16[] iLeftEdgeInImageY
uint16[] iRightEdgeInImageX
uint16[] iRightEdgeInImageY
uint16[] iHeightInImage
float32[] fDistance
float32[] fAngle
"""
  __slots__ = ['bObstacleWasSeen','iObstacleNumber','iLeftEdgeInImageX','iLeftEdgeInImageY','iRightEdgeInImageX','iRightEdgeInImageY','iHeightInImage','fDistance','fAngle']
  _slot_types = ['uint8','uint16','uint16[]','uint16[]','uint16[]','uint16[]','uint16[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bObstacleWasSeen,iObstacleNumber,iLeftEdgeInImageX,iLeftEdgeInImageY,iRightEdgeInImageX,iRightEdgeInImageY,iHeightInImage,fDistance,fAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bObstacleWasSeen is None:
        self.bObstacleWasSeen = 0
      if self.iObstacleNumber is None:
        self.iObstacleNumber = 0
      if self.iLeftEdgeInImageX is None:
        self.iLeftEdgeInImageX = []
      if self.iLeftEdgeInImageY is None:
        self.iLeftEdgeInImageY = []
      if self.iRightEdgeInImageX is None:
        self.iRightEdgeInImageX = []
      if self.iRightEdgeInImageY is None:
        self.iRightEdgeInImageY = []
      if self.iHeightInImage is None:
        self.iHeightInImage = []
      if self.fDistance is None:
        self.fDistance = []
      if self.fAngle is None:
        self.fAngle = []
    else:
      self.bObstacleWasSeen = 0
      self.iObstacleNumber = 0
      self.iLeftEdgeInImageX = []
      self.iLeftEdgeInImageY = []
      self.iRightEdgeInImageX = []
      self.iRightEdgeInImageY = []
      self.iHeightInImage = []
      self.fDistance = []
      self.fAngle = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH().pack(_x.bObstacleWasSeen, _x.iObstacleNumber))
      length = len(self.iLeftEdgeInImageX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.iLeftEdgeInImageX))
      length = len(self.iLeftEdgeInImageY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.iLeftEdgeInImageY))
      length = len(self.iRightEdgeInImageX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.iRightEdgeInImageX))
      length = len(self.iRightEdgeInImageY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.iRightEdgeInImageY))
      length = len(self.iHeightInImage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.iHeightInImage))
      length = len(self.fDistance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.fDistance))
      length = len(self.fAngle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.fAngle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bObstacleWasSeen, _x.iObstacleNumber,) = _get_struct_BH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iLeftEdgeInImageX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iLeftEdgeInImageY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iRightEdgeInImageX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iRightEdgeInImageY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iHeightInImage = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fDistance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fAngle = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH().pack(_x.bObstacleWasSeen, _x.iObstacleNumber))
      length = len(self.iLeftEdgeInImageX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.iLeftEdgeInImageX.tostring())
      length = len(self.iLeftEdgeInImageY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.iLeftEdgeInImageY.tostring())
      length = len(self.iRightEdgeInImageX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.iRightEdgeInImageX.tostring())
      length = len(self.iRightEdgeInImageY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.iRightEdgeInImageY.tostring())
      length = len(self.iHeightInImage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.iHeightInImage.tostring())
      length = len(self.fDistance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fDistance.tostring())
      length = len(self.fAngle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAngle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.bObstacleWasSeen, _x.iObstacleNumber,) = _get_struct_BH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iLeftEdgeInImageX = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iLeftEdgeInImageY = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iRightEdgeInImageX = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iRightEdgeInImageY = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.iHeightInImage = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fDistance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fAngle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
